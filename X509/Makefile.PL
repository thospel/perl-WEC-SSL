#!/usr/bin/perl -w
# $Id: Makefile.PL 2693 2008-01-02 09:54:19Z hospelt $
use 5.006001;
use strict;
use warnings;
use ExtUtils::MakeMaker;
use vars qw($VERSION);
$VERSION = "1.000";

# Path testing derived from Net::SSLeay
my $openssl_path;
# Maybe hunt for a specific recent enough version...
for my $dir (split m{:}, $ENV{PATH}) {
    if (-f "$dir/openssl" && -x _ || -f "$dir/openssl.exe" && -x _) {
        $dir =~ s!/s?bin/*\z!!;
        $openssl_path = $dir;
        last;
    }
}
$openssl_path = shift if @ARGV && $ARGV[0] ne "--";
shift if @ARGV && $ARGV[0] eq '--';   # Rest of args are for MakeMaker

die "Could not find openssl executable\n" if !defined $openssl_path;
print "openssl_path=$openssl_path\n";
my $exe_path;
for my $exe_name ("bin/openssl", "bin/openssl.exe",
                  "sbin/openssl", "sbin/openssl.exe",
                  "out32dll/openssl.exe",
                  "openssl", "openssl.exe") {
    if (-f "$openssl_path/$exe_name" && -x _) {
        $exe_path = "$openssl_path/$exe_name";
        last;
    }
}
if (!$exe_path) {
    die "I could not find your OpenSSL in '$openssl_path'\n";
}
print "exe_path=$exe_path\n";

my $version = `$exe_path version` ||
    die "Couldn't run '$exe_path version' ($?)\n";
my ($lib_name, $major, $minor, $letters) =
    $version =~ /^(OpenSSL)\s+(\d+\.\d+)\.(\d+)([a-z-]*)\s/ or
    die("Could not parse OpenSSL version string '$version'.\n",
        "Either you have bogus OpenSSL or a new version has changed the version number format.\n");
print "version is $lib_name $major.$minor$letters\n";

my ($libs, $rsaref);
if ($^O eq "MSWin32") {
    warn "RSAREF build on Windows not supported out of box" if $rsaref;
    $libs = "-llibeay32 -lssleay32";
} else {
    # There is some confusion over the correct ordering
    # of these libraries. Tarang Kumar Patel <mombasa@ptolemy.arc.nasa.gov>
    # reports this order to work on Solaris 7 and openssl-0.9.6b
    $libs = $rsaref ? "-lssl -lcrypto -lRSAglue -lrsaref" : "-lssl -lcrypto";

    # old order which might work on some platforms
    #$libs = $rsaref ? "-lssl -lRSAglue -lcrypto -lrsaref" : "-lssl -lcrypto";

    # Check that perl and openssl were compiled using the same compiler
    # and options.

    # When using aCC under HP-UX additional `+e' flag must be passed.
    # --code not implemented--
}

WriteMakefile
    (NAME		=> 'WEC::SSL::X509',
     VERSION_FROM	=> 'lib/WEC/SSL/X509.pm', # finds $VERSION
     BUILD_REQUIRES	=> {
	 # Only for the tests
	 "Test::More"	=> "0.01",
     },
     PREREQ_PM		=> {
         "Exporter::Tidy"	=> 0.05,	# For flexible exporting"
     }, # e.g., Module::Name => 1.1
     AUTHOR		=> 'Ton Hospel <WEC-SSL-X509@ton.iguana.be>',
     # OPTIMIZE		=> "-g",
     LIBS		=> ["-L$openssl_path -L$openssl_path/lib -L$openssl_path/out32dll $libs"],
     INC 		=> "-I ../include -I$openssl_path/include -I$openssl_path/inc32",
     depend		=> {
         '$(O_FILES)'	=> "../include/wec_ssl.h ../include/ppport.h",
     },
     DEFINE		=> '', # e.g., '-DHAVE_SOMETHING'
     # Un-comment this if you add C files to link with later:
     # OBJECT		=> '$(O_FILES)',
     $^O eq "MSWin32" ? (
         PM_FILTER	=> '$(PERL) -p -e1',
     ) : (),
     clean		=> {
         FILES => '$(DISTVNAME).ppm',
     },
);

# START MY
# autogenerated by release_pm
BEGIN {
    package MY;

    use vars qw(%postamble);

undef &postamble;	## no critic (ProhibitUselessNoCritic ProhibitAmpersandSigils)
}
{
    package MY;
    sub postamble {
	return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
    }
}
# END MY
